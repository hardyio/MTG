apply plugin: 'com.android.application'
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId rootProject.ext.android[applicationId]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
//        ndk {
//            //设置支持的SO库架构
//            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
//        }
    }

    signingConfigs {
        release {
            keyAlias rootProject.ext.android.keyAlias
            keyPassword rootProject.ext.android.keyPassword
            storeFile file(rootProject.ext.android.storeFile)
            storePassword rootProject.ext.android.storePassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true //开启混淆编译
            shrinkResources false //移除无用资源
            zipAlignEnabled true //zipalign优化
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField("boolean", "LOG_DEBUG", "false")//正式版不打印日志
        }
        debug {
            minifyEnabled false //开启混淆编译
            shrinkResources false //移除无用资源
            zipAlignEnabled true //zipalign优化
//            signingConfig signingConfigs.release // 把debug签名配置成Release版的签名
            buildConfigField("boolean", "LOG_DEBUG", "true")
        }
    }


    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    /* 打包命名 */
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "wanandroid-${variant.buildType.name}-v${defaultConfig.versionName}.apk"
        }
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependencies["multidex"]
    implementation(name:'arms-release', ext:'aar')
    //tools
    //注意 Arms 核心库现在并不会依赖某个 EventBus, 要想使用 EventBus, 还请在项目中自行依赖对应的 EventBus
    //现在支持两种 EventBus, greenrobot 的 EventBus 和畅销书 《Android源码设计模式解析与实战》的作者 何红辉 所作的 AndroidEventBus
    //依赖后 Arms 会自动检测您依赖的 EventBus 并自动注册
    //建议使用 AndroidEventBus, 特别是组件化项目, 原因请看 https://github.com/hehonghui/AndroidEventBus/issues/49
    //这种做法可以让使用者有自行选择三方库的权利, 并且还可以减轻 Arms 的体积
    implementation rootProject.ext.dependencies["androideventbus"]
    implementation 'androidx.appcompat:appcompat:1.2.0'
//    implementation rootProject.ext.dependencies["eventbus"]

    compileOnly rootProject.ext.dependencies["javax.annotation"]
    implementation rootProject.ext.dependencies["dagger2"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    implementation rootProject.ext.dependencies["progressmanager"]
    implementation rootProject.ext.dependencies["retrofit-url-manager"]
//    api rootProject.ext.dependencies["lifecyclemodel"]
    api(rootProject.ext.dependencies["rxlifecycle2"]) {
        exclude module: 'rxjava'
        exclude module: 'jsr305'
    }
    implementation rootProject.ext.dependencies["rxlifecycle2-android"]
    //view
    implementation(rootProject.ext.dependencies["butterknife"]) {
        exclude module: 'support-annotations'
        exclude module: 'core'
    }
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    // module
    implementation project(':commonLibs')

    //Arms 核心库不再包含 AndroidAutoLayout, 现在可自行选择屏幕适配方案, 不想使用 AndroidAutoLayout 就不要依赖 arms-autolayout
//    implementation 'me.jessyan:arms-autolayout:2.5.0'

    //现在已经将 Demo 中的屏幕适配框架从 AndroidAutoLayout 替换为 AndroidAutoSize, AndroidAutoLayout 和 AndroidAutoSize 可以在项目中共存
    //所以旧项目只要依赖 arms-autolayout 即可兼容之前的旧页面, 新页面可以使用 AndroidAutoSize 进行适配, 等有时间了再将旧页面全部替换为 AndroidAutoSize
    //不想适配就不要依赖
//    implementation rootProject.ext.dependencies["autosize"]

    //Arms 核心库不再包含 Glide, 想使用其他图片加载框架或者想自行扩展 ImageLoaderStrategy 就不要依赖 arms-imageloader-glide
    //依赖 arms-imageloader-glide 后还需要在 GlobalConfiguration 中手动注册 GlideImageLoaderStrategy

    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    // UI
    implementation rootProject.ext.dependencies["SmartRefreshLayout"]
    implementation rootProject.ext.dependencies["SmartRefreshHeader"]
    implementation rootProject.ext.dependencies["banner"]
    implementation rootProject.ext.dependencies["brvah"]
    implementation rootProject.ext.dependencies["AnyLayer"]
    implementation rootProject.ext.dependencies["flexBox"]
    implementation rootProject.ext.dependencies["flycoTabLayout"]
    implementation rootProject.ext.dependencies["CircleImageView"]
    implementation rootProject.ext.dependencies["LikeButton"]
    implementation rootProject.ext.dependencies["multipleStatusView"]
    implementation rootProject.ext.dependencies["AVLoading"]

    //沉浸式
    implementation rootProject.ext.dependencies["immersionbar-base"]
    implementation rootProject.ext.dependencies["immersionbar-fragment"]

    // material design
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["cardview-v7"]

    // rxjava
    implementation rootProject.ext.dependencies["rxandroid2"]
    implementation rootProject.ext.dependencies["rxjava2"]
    implementation rootProject.ext.dependencies["retrofit-adapter-rxjava2"]
    implementation rootProject.ext.dependencies["rxpermissions2"]
    implementation rootProject.ext.dependencies["AutoDispose"]
    implementation rootProject.ext.dependencies["AutoDispose-components"]

    // network
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["retrofit-converter-gson"]
    implementation rootProject.ext.dependencies["retrofit-converter-scalars"]
    implementation rootProject.ext.dependencies["okhttp3"]
    implementation rootProject.ext.dependencies["logging-interceptor"]

    //rxtool
    implementation rootProject.ext.dependencies["RxKit"]
    implementation rootProject.ext.dependencies["RxUI"]
    implementation rootProject.ext.dependencies["RxCamera"]
    implementation rootProject.ext.dependencies["RxFeature"]

    implementation rootProject.ext.dependencies['rxerrorhandler2']
    // test
//    testImplementation rootProject.ext.dependencies["junit"]
//    debugImplementation rootProject.ext.dependencies["canary-debug"]
//    releaseImplementation rootProject.ext.dependencies["canary-release"]
//    testImplementation rootProject.ext.dependencies["canary-release"]

    // 适配
//    implementation rootProject.ext.dependencies["autosize"]

    // jsoup 解析网页
    implementation "org.jsoup:jsoup:1.9.2"

    //AndroidutilCode
    implementation rootProject.ext.dependencies["AndroidutilCode"]

    //Facebook
    implementation rootProject.ext.dependencies["facebook"]

//    implementation platform('com.google.firebase:firebase-bom:25.12.0')
//    implementation 'com.google.firebase:firebase-messaging'
//    implementation 'com.google.firebase:firebase-analytics'

    implementation 'com.android.installreferrer:installreferrer:2.1'
    //Google Firebase 确保您的 Android 应用符合以下条件：1.目标为 API 级别 16 (Jelly Bean) 或更高版本 2.使用 Gradle 4.1 或更高版本
//    implementation 'com.google.firebase:firebase-core:16.0.7'
//    implementation 'com.google.android.gms:play-services-auth:16.0.7'
//    implementation 'com.google.android.gms:play-services-analytics:16.0.7'
//    implementation 'com.google.firebase:firebase-messaging:17.3.4'
//    implementation 'android.arch.work:work-runtime:1.0.1'
    // required for all Android apps
    implementation 'io.branch.sdk.android:library:5.+'
    // required if your app is in the Google Play Store (tip: avoid using bundled play services libs)
    implementation 'com.google.firebase:firebase-appindexing:19.0.0'
    implementation 'com.google.android.gms:play-services-ads-identifier:16+'
}

//Google Firebase配置要求(Google Play services Gradle plugin) 注意，必须添加在文件底部！！！
apply plugin: 'com.google.gms.google-services'
